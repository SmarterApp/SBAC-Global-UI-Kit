/* ------------------------------
 * Color Mixin
------------------------------ */
.colorElement(@colorName) {
  h1&, .h1&,
  h2&, .h2&,
  h3&, .h3&,
  h4&, .h4&,
  h5&, .h5&,
  h6&, .h6&,
  p&,
  span&,
  a&  {
    color: @colorName;
  }
  &.bar:before {
    background-color: @colorName;
  }
  div&,
  .label& {
    color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
    background-color: @colorName;
    h1, .h1,
    h2, .h2,
    h3, .h3 {
        color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
        small {
          color: contrast(@colorName, darken(@colorName, 65%), lighten(@colorName, 65%));
        }
    }
    h4, .h4,
    h5, .h5,
    h6, .h6
    p,
    span {
      color: contrast(@colorName, darken(@colorName, 50%), lighten(@colorName, 50%));
      small {
        color: contrast(@colorName, darken(@colorName, 40%), lighten(@colorName, 40%));
      }
    }
    .label {
      font-weight: 400;
      color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
      background-color: contrast(@colorName, darken(@colorName, 15%), lighten(@colorName, 15%));
    }
    &.border-only {
      color: @colorName;
      border-color: @colorName;
    }
    .bar-data {
      color: @colorName;
      &:before {
        border-color: @colorName;
      }
    }
  }
  .label-group& {
    .label {
      @label-group-color: desaturate(@colorName, 40%);
      color: contrast(@label-group-color, darken(@label-group-color, 75%), lighten(@label-group-color, 75%));
      background-color: @label-group-color;
      &:first-child {
        background-color: darken(@label-group-color, 10%);
      }
      &:last-child {
        background-color: lighten(@label-group-color, 10%);
      }
    }
  }
  .tag& {
    .label {
      color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
      background-color: @colorName;
    }
    span:not(.icon):not(.label) {
      color: @colorName;
    }
    &:hover {
      color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
      background-color: @colorName;
      border-color: @colorName;
      .label {
        background-color: darken(@colorName, 20%);
      }
    }
    &.reverse&,
    &.active& {
      color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
      background-color: @colorName;
      border-color: @colorName;
      .label {
        color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
        background-color: darken(@colorName, 20%);
      }
      span:not(.icon):not(.label) {
        color: contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%));
      }
      &:hover {
        color: contrast(@colorName, darken(@colorName, 100%), lighten(@colorName, 100%));
        background-color: darken(@colorName, 5%);
        border-color: darken(@colorName, 10%);
        .label {
          background-color: darken(@colorName, 10%);
        }
      }
    }
  }
  .panel& {
    background-color: @white;
    border: none;
    .panel-heading {
      background-color: @colorName;
      * {
        color: contrast(@colorName, darken(@colorName, 100%), lighten(@colorName, 100%));
      }
    }
    .panel-body,
    .panel-footer {
      background-color: @white;
      color: @text-color;
    }
  }
  .btn& {
    .button-variant(contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%)); @colorName; transparent);
    &:hover {
      .button-variant(contrast(@colorName, darken(@colorName, 75%), lighten(@colorName, 75%)); darken(@colorName, 10%); transparent);
    }
  }
  &[class*="border-"] {
    border-color: @colorName;
  }
}

/* ------------------------------
 * Border Classes
------------------------------ */
[class*="border-"] {
  border-width: 0px;
  border-style: solid;
}
.border-top {
  border-top-width: 1px;
  padding-top: 0.5em;
}
.border-right {
  border-right-width: 1px;
  padding-right: 0.5em;
}
.border-bottom {
  border-bottom-width: 1px;
  padding-bottom: 0.5em;
}
.border-left {
  border-left-width: 1px;
  padding-left: 0.5em;
}
.border-vertical {
  .border-top;
  .border-bottom;
}
.border-horizontal {
  .border-right;
  .border-left;
}
.border-all {
  .border-top;
  .border-right;
  .border-bottom;
  .border-left;
}


/* ------------------------------
 * Width Classes from Data Attributes
------------------------------ */
.generate-width-classes(100, 0);

.generate-width-classes(@n, @i: 0) when (@i =< @n) {
  [data-width="@{i}"] {
    width: (@i * 1%);
  }
  .generate-width-classes(@n, (@i + 1));
}


/* ------------------------------
 * Position Classes from Data Attributes
------------------------------ */
.generate-left-position-classes(100, 0);

.generate-left-position-classes(@n, @i : 0) when (@i =< @n) {
  [data-left="@{i}"] {
    left: (@i * 1%);
  }
  .generate-left-position-classes(@n, (@i + 1));
}


/* ------------------------------
 * Table column centering and right aligning classes
------------------------------ */
.table-cols(@n, @i: 1) when (@i =< @n) {
  .table-center-col-@{i} {
    tr > th:nth-child(@{i}),
    tr > td:nth-child(@{i}) {
      text-align: center;
    }
  }
  .table-right-col-@{i} {
    tr > th:nth-child(@{i}),
    tr > td:nth-child(@{i}) {
      text-align: right;
    }
  }
  // Continue the iteration
  .table-cols(@n, (@i + 1));
}
.table-cols(16);
