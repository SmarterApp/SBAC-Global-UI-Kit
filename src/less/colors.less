// ------------------------------
// Colors
// ------------------------------

// Blues
@blue:                  #006298;
@blue-dark:             #04384E;
@teal:                  #0090B7;
// @aqua:                  #3696E6; insufficient contrast ratio with white text
@aqua:                  #0085AD;

// Greens
@green:                 #43B02A;
@green-dark:            #246A34;

// Hot Colors
@orange:                #D66E1E;
@red:                   #D5124A;
@red-dark:              #8A1538;
@maroon:                #5B1931;

// Neutrals
@black:                 #000000;
@gray-darkest:          #2a2b2d;
@gray-darker:           #84888d;
@gray-dark:             #A7A7A7;
@gray:                  #B8B8B8;
@gray-light:            #D5D5D5;
@gray-lighter:          #E6E6E6;
@gray-lightest:         #F8F8F8;
@white:                 #FFFFFF;

// Bootstrap Color Vars
@brand-primary:         @aqua;
@brand-success:         @green;
@brand-info:            @blue-dark;
@brand-warning:         @orange;
@brand-danger:          @red;


// Create color classes
// List the colors
@colorVars: blue, blue-dark, teal, aqua, green, green-dark, orange, red, red-dark, maroon, black, gray-darkest, gray-darker, gray-dark, gray, gray-light, gray-lighter, gray-lightest, white;
// Call the generator mixin
// Yes, it's supposed to be called in recursive order
.generate-color-classes(@colorVars, 1);
// Generate color classes based on declared names above
.generate-color-classes(@colorName, @i) when (@i =< length(@colorName)) {
  @name: extract(@colorName, @i);
  .@{name} {
    .colorElement(@@name);
  }
  .generate-color-classes(@colorName, (@i + 1));
}
